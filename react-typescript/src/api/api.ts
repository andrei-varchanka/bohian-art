/* tslint:disable */
/* eslint-disable */
/**
 * Bohian-art API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthUser
 */
export interface AuthUser {
    /**
     * 
     * @type {string}
     * @memberof AuthUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof AuthUser
     */
    password: string;
}
/**
 * 
 * @export
 * @interface AuthUserResponse
 */
export interface AuthUserResponse {
    /**
     * 
     * @type {User}
     * @memberof AuthUserResponse
     */
    user: User;
    /**
     * 
     * @type {string}
     * @memberof AuthUserResponse
     */
    token: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuthUserResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof AuthUserResponse
     */
    errorMessage: string;
}
/**
 * 
 * @export
 * @interface BaseResponse
 */
export interface BaseResponse {
    /**
     * 
     * @type {boolean}
     * @memberof BaseResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof BaseResponse
     */
    errorMessage: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    password: string;
}
/**
 * 
 * @export
 * @interface Painting
 */
export interface Painting {
    /**
     * 
     * @type {string}
     * @memberof Painting
     */
    id?: string;
    /**
     * 
     * @type {PaintingImage}
     * @memberof Painting
     */
    image: PaintingImage;
    /**
     * 
     * @type {string}
     * @memberof Painting
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Painting
     */
    author: string;
    /**
     * 
     * @type {string}
     * @memberof Painting
     */
    userId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Painting
     */
    genres: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Painting
     */
    height: number;
    /**
     * 
     * @type {number}
     * @memberof Painting
     */
    width: number;
    /**
     * 
     * @type {number}
     * @memberof Painting
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof Painting
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface PaintingImage
 */
export interface PaintingImage {
    /**
     * 
     * @type {string}
     * @memberof PaintingImage
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PaintingImage
     */
    contentType?: string;
    /**
     * 
     * @type {string}
     * @memberof PaintingImage
     */
    data?: string;
}
/**
 * 
 * @export
 * @interface PaintingResponse
 */
export interface PaintingResponse {
    /**
     * 
     * @type {Painting}
     * @memberof PaintingResponse
     */
    painting: Painting;
    /**
     * 
     * @type {boolean}
     * @memberof PaintingResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof PaintingResponse
     */
    errorMessage: string;
}
/**
 * 
 * @export
 * @interface PaintingsParametersResponse
 */
export interface PaintingsParametersResponse {
    /**
     * 
     * @type {number}
     * @memberof PaintingsParametersResponse
     */
    minPrice: number;
    /**
     * 
     * @type {number}
     * @memberof PaintingsParametersResponse
     */
    maxPrice: number;
    /**
     * 
     * @type {number}
     * @memberof PaintingsParametersResponse
     */
    minWidth: number;
    /**
     * 
     * @type {number}
     * @memberof PaintingsParametersResponse
     */
    maxWidth: number;
    /**
     * 
     * @type {number}
     * @memberof PaintingsParametersResponse
     */
    minHeight: number;
    /**
     * 
     * @type {number}
     * @memberof PaintingsParametersResponse
     */
    maxHeight: number;
}
/**
 * 
 * @export
 * @interface PaintingsResponse
 */
export interface PaintingsResponse {
    /**
     * 
     * @type {Array<Painting>}
     * @memberof PaintingsResponse
     */
    paintings: Array<Painting>;
    /**
     * 
     * @type {number}
     * @memberof PaintingsResponse
     */
    count?: number;
    /**
     * 
     * @type {number}
     * @memberof PaintingsResponse
     */
    totalPages?: number;
    /**
     * 
     * @type {number}
     * @memberof PaintingsResponse
     */
    currentPage?: number;
    /**
     * 
     * @type {boolean}
     * @memberof PaintingsResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof PaintingsResponse
     */
    errorMessage: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    role: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone?: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {User}
     * @memberof UserResponse
     */
    user: User;
    /**
     * 
     * @type {boolean}
     * @memberof UserResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    errorMessage: string;
}
/**
 * 
 * @export
 * @interface UsersResponse
 */
export interface UsersResponse {
    /**
     * 
     * @type {Array<User>}
     * @memberof UsersResponse
     */
    users: Array<User>;
    /**
     * 
     * @type {boolean}
     * @memberof UsersResponse
     */
    success: boolean;
    /**
     * 
     * @type {string}
     * @memberof UsersResponse
     */
    errorMessage: string;
}

/**
 * PaintingsApi - axios parameter creator
 * @export
 */
export const PaintingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete the painting
         * @param {string} paintingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePainting: async (paintingId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paintingId' is not null or undefined
            assertParamExists('deletePainting', 'paintingId', paintingId)
            const localVarPath = `/paintings/{paintingId}`
                .replace(`{${"paintingId"}}`, encodeURIComponent(String(paintingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all paintings
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [userId] 
         * @param {number} [priceFrom] 
         * @param {number} [priceTo] 
         * @param {number} [widthFrom] 
         * @param {number} [widthTo] 
         * @param {number} [heightFrom] 
         * @param {number} [heightTo] 
         * @param {string} [genres] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPaintings: async (page?: number, limit?: number, userId?: string, priceFrom?: number, priceTo?: number, widthFrom?: number, widthTo?: number, heightFrom?: number, heightTo?: number, genres?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/paintings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (priceFrom !== undefined) {
                localVarQueryParameter['price_from'] = priceFrom;
            }

            if (priceTo !== undefined) {
                localVarQueryParameter['price_to'] = priceTo;
            }

            if (widthFrom !== undefined) {
                localVarQueryParameter['width_from'] = widthFrom;
            }

            if (widthTo !== undefined) {
                localVarQueryParameter['width_to'] = widthTo;
            }

            if (heightFrom !== undefined) {
                localVarQueryParameter['height_from'] = heightFrom;
            }

            if (heightTo !== undefined) {
                localVarQueryParameter['height_to'] = heightTo;
            }

            if (genres !== undefined) {
                localVarQueryParameter['genres'] = genres;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the painting by id
         * @param {string} paintingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPainting: async (paintingId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paintingId' is not null or undefined
            assertParamExists('getPainting', 'paintingId', paintingId)
            const localVarPath = `/paintings/{paintingId}`
                .replace(`{${"paintingId"}}`, encodeURIComponent(String(paintingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paintings parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParameters: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/paintings/parameters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a new painting
         * @param {string} paintingId 
         * @param {string} name 
         * @param {string} author 
         * @param {string} userId 
         * @param {Array<string>} genres 
         * @param {number} height 
         * @param {number} width 
         * @param {number} price 
         * @param {any} [image] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePainting: async (paintingId: string, name: string, author: string, userId: string, genres: Array<string>, height: number, width: number, price: number, image?: any, description?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'paintingId' is not null or undefined
            assertParamExists('updatePainting', 'paintingId', paintingId)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updatePainting', 'name', name)
            // verify required parameter 'author' is not null or undefined
            assertParamExists('updatePainting', 'author', author)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updatePainting', 'userId', userId)
            // verify required parameter 'genres' is not null or undefined
            assertParamExists('updatePainting', 'genres', genres)
            // verify required parameter 'height' is not null or undefined
            assertParamExists('updatePainting', 'height', height)
            // verify required parameter 'width' is not null or undefined
            assertParamExists('updatePainting', 'width', width)
            // verify required parameter 'price' is not null or undefined
            assertParamExists('updatePainting', 'price', price)
            const localVarPath = `/paintings/{paintingId}`
                .replace(`{${"paintingId"}}`, encodeURIComponent(String(paintingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer_auth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (author !== undefined) { 
                localVarFormParams.append('author', author as any);
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('userId', userId as any);
            }
                if (genres) {
                localVarFormParams.append(genres.join(COLLECTION_FORMATS.csv));
            }

    
            if (height !== undefined) { 
                localVarFormParams.append('height', height as any);
            }
    
            if (width !== undefined) { 
                localVarFormParams.append('width', width as any);
            }
    
            if (price !== undefined) { 
                localVarFormParams.append('price', price as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a new painting
         * @param {any} image 
         * @param {string} name 
         * @param {string} author 
         * @param {string} userId 
         * @param {Array<string>} genres 
         * @param {number} height 
         * @param {number} width 
         * @param {number} price 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPainting: async (image: any, name: string, author: string, userId: string, genres: Array<string>, height: number, width: number, price: number, description?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('uploadPainting', 'image', image)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('uploadPainting', 'name', name)
            // verify required parameter 'author' is not null or undefined
            assertParamExists('uploadPainting', 'author', author)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('uploadPainting', 'userId', userId)
            // verify required parameter 'genres' is not null or undefined
            assertParamExists('uploadPainting', 'genres', genres)
            // verify required parameter 'height' is not null or undefined
            assertParamExists('uploadPainting', 'height', height)
            // verify required parameter 'width' is not null or undefined
            assertParamExists('uploadPainting', 'width', width)
            // verify required parameter 'price' is not null or undefined
            assertParamExists('uploadPainting', 'price', price)
            const localVarPath = `/paintings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer_auth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (author !== undefined) { 
                localVarFormParams.append('author', author as any);
            }
    
            if (userId !== undefined) { 
                localVarFormParams.append('userId', userId as any);
            }
                if (genres) {
                localVarFormParams.append(genres.join(COLLECTION_FORMATS.csv));
            }

    
            if (height !== undefined) { 
                localVarFormParams.append('height', height as any);
            }
    
            if (width !== undefined) { 
                localVarFormParams.append('width', width as any);
            }
    
            if (price !== undefined) { 
                localVarFormParams.append('price', price as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaintingsApi - functional programming interface
 * @export
 */
export const PaintingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaintingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete the painting
         * @param {string} paintingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePainting(paintingId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePainting(paintingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all paintings
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [userId] 
         * @param {number} [priceFrom] 
         * @param {number} [priceTo] 
         * @param {number} [widthFrom] 
         * @param {number} [widthTo] 
         * @param {number} [heightFrom] 
         * @param {number} [heightTo] 
         * @param {string} [genres] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPaintings(page?: number, limit?: number, userId?: string, priceFrom?: number, priceTo?: number, widthFrom?: number, widthTo?: number, heightFrom?: number, heightTo?: number, genres?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaintingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPaintings(page, limit, userId, priceFrom, priceTo, widthFrom, widthTo, heightFrom, heightTo, genres, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the painting by id
         * @param {string} paintingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPainting(paintingId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaintingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPainting(paintingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get paintings parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParameters(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaintingsParametersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParameters(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a new painting
         * @param {string} paintingId 
         * @param {string} name 
         * @param {string} author 
         * @param {string} userId 
         * @param {Array<string>} genres 
         * @param {number} height 
         * @param {number} width 
         * @param {number} price 
         * @param {any} [image] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePainting(paintingId: string, name: string, author: string, userId: string, genres: Array<string>, height: number, width: number, price: number, image?: any, description?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaintingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePainting(paintingId, name, author, userId, genres, height, width, price, image, description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload a new painting
         * @param {any} image 
         * @param {string} name 
         * @param {string} author 
         * @param {string} userId 
         * @param {Array<string>} genres 
         * @param {number} height 
         * @param {number} width 
         * @param {number} price 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadPainting(image: any, name: string, author: string, userId: string, genres: Array<string>, height: number, width: number, price: number, description?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaintingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPainting(image, name, author, userId, genres, height, width, price, description, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaintingsApi - factory interface
 * @export
 */
export const PaintingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaintingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete the painting
         * @param {string} paintingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePainting(paintingId: string, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.deletePainting(paintingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all paintings
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {string} [userId] 
         * @param {number} [priceFrom] 
         * @param {number} [priceTo] 
         * @param {number} [widthFrom] 
         * @param {number} [widthTo] 
         * @param {number} [heightFrom] 
         * @param {number} [heightTo] 
         * @param {string} [genres] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPaintings(page?: number, limit?: number, userId?: string, priceFrom?: number, priceTo?: number, widthFrom?: number, widthTo?: number, heightFrom?: number, heightTo?: number, genres?: string, options?: any): AxiosPromise<PaintingsResponse> {
            return localVarFp.getAllPaintings(page, limit, userId, priceFrom, priceTo, widthFrom, widthTo, heightFrom, heightTo, genres, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the painting by id
         * @param {string} paintingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPainting(paintingId: string, options?: any): AxiosPromise<PaintingResponse> {
            return localVarFp.getPainting(paintingId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paintings parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParameters(options?: any): AxiosPromise<PaintingsParametersResponse> {
            return localVarFp.getParameters(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a new painting
         * @param {string} paintingId 
         * @param {string} name 
         * @param {string} author 
         * @param {string} userId 
         * @param {Array<string>} genres 
         * @param {number} height 
         * @param {number} width 
         * @param {number} price 
         * @param {any} [image] 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePainting(paintingId: string, name: string, author: string, userId: string, genres: Array<string>, height: number, width: number, price: number, image?: any, description?: string, options?: any): AxiosPromise<PaintingResponse> {
            return localVarFp.updatePainting(paintingId, name, author, userId, genres, height, width, price, image, description, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a new painting
         * @param {any} image 
         * @param {string} name 
         * @param {string} author 
         * @param {string} userId 
         * @param {Array<string>} genres 
         * @param {number} height 
         * @param {number} width 
         * @param {number} price 
         * @param {string} [description] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadPainting(image: any, name: string, author: string, userId: string, genres: Array<string>, height: number, width: number, price: number, description?: string, options?: any): AxiosPromise<PaintingResponse> {
            return localVarFp.uploadPainting(image, name, author, userId, genres, height, width, price, description, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PaintingsApi - object-oriented interface
 * @export
 * @class PaintingsApi
 * @extends {BaseAPI}
 */
export class PaintingsApi extends BaseAPI {
    /**
     * 
     * @summary Delete the painting
     * @param {string} paintingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaintingsApi
     */
    public deletePainting(paintingId: string, options?: any) {
        return PaintingsApiFp(this.configuration).deletePainting(paintingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all paintings
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {string} [userId] 
     * @param {number} [priceFrom] 
     * @param {number} [priceTo] 
     * @param {number} [widthFrom] 
     * @param {number} [widthTo] 
     * @param {number} [heightFrom] 
     * @param {number} [heightTo] 
     * @param {string} [genres] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaintingsApi
     */
    public getAllPaintings(page?: number, limit?: number, userId?: string, priceFrom?: number, priceTo?: number, widthFrom?: number, widthTo?: number, heightFrom?: number, heightTo?: number, genres?: string, options?: any) {
        return PaintingsApiFp(this.configuration).getAllPaintings(page, limit, userId, priceFrom, priceTo, widthFrom, widthTo, heightFrom, heightTo, genres, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the painting by id
     * @param {string} paintingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaintingsApi
     */
    public getPainting(paintingId: string, options?: any) {
        return PaintingsApiFp(this.configuration).getPainting(paintingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paintings parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaintingsApi
     */
    public getParameters(options?: any) {
        return PaintingsApiFp(this.configuration).getParameters(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a new painting
     * @param {string} paintingId 
     * @param {string} name 
     * @param {string} author 
     * @param {string} userId 
     * @param {Array<string>} genres 
     * @param {number} height 
     * @param {number} width 
     * @param {number} price 
     * @param {any} [image] 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaintingsApi
     */
    public updatePainting(paintingId: string, name: string, author: string, userId: string, genres: Array<string>, height: number, width: number, price: number, image?: any, description?: string, options?: any) {
        return PaintingsApiFp(this.configuration).updatePainting(paintingId, name, author, userId, genres, height, width, price, image, description, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a new painting
     * @param {any} image 
     * @param {string} name 
     * @param {string} author 
     * @param {string} userId 
     * @param {Array<string>} genres 
     * @param {number} height 
     * @param {number} width 
     * @param {number} price 
     * @param {string} [description] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaintingsApi
     */
    public uploadPainting(image: any, name: string, author: string, userId: string, genres: Array<string>, height: number, width: number, price: number, description?: string, options?: any) {
        return PaintingsApiFp(this.configuration).uploadPainting(image, name, author, userId, genres, height, width, price, description, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Authorize user
         * @param {AuthUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth: async (body: AuthUser, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('auth', 'body', body)
            const localVarPath = `/users/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Change user password
         * @param {string} userId 
         * @param {InlineObject} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (userId: string, body: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('changePassword', 'userId', userId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('changePassword', 'body', body)
            const localVarPath = `/users/{userId}/change-password`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new user
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (body: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createUser', 'body', body)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete the user
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the user by id
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update the user
         * @param {string} userId 
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, body: User, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateUser', 'body', body)
            const localVarPath = `/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer_auth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Authorize user
         * @param {AuthUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async auth(body: AuthUser, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.auth(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Change user password
         * @param {string} userId 
         * @param {InlineObject} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(userId: string, body: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(userId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create a new user
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(body: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete the user
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the user by id
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update the user
         * @param {string} userId 
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, body: User, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Authorize user
         * @param {AuthUser} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auth(body: AuthUser, options?: any): AxiosPromise<AuthUserResponse> {
            return localVarFp.auth(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Change user password
         * @param {string} userId 
         * @param {InlineObject} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(userId: string, body: InlineObject, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.changePassword(userId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new user
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(body: User, options?: any): AxiosPromise<AuthUserResponse> {
            return localVarFp.createUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete the user
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.deleteUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(options?: any): AxiosPromise<UsersResponse> {
            return localVarFp.getAllUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the user by id
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update the user
         * @param {string} userId 
         * @param {User} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, body: User, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.updateUser(userId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Authorize user
     * @param {AuthUser} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public auth(body: AuthUser, options?: any) {
        return UsersApiFp(this.configuration).auth(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Change user password
     * @param {string} userId 
     * @param {InlineObject} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public changePassword(userId: string, body: InlineObject, options?: any) {
        return UsersApiFp(this.configuration).changePassword(userId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new user
     * @param {User} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(body: User, options?: any) {
        return UsersApiFp(this.configuration).createUser(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete the user
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(userId: string, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getAllUsers(options?: any) {
        return UsersApiFp(this.configuration).getAllUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the user by id
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(userId: string, options?: any) {
        return UsersApiFp(this.configuration).getUser(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update the user
     * @param {string} userId 
     * @param {User} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(userId: string, body: User, options?: any) {
        return UsersApiFp(this.configuration).updateUser(userId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


